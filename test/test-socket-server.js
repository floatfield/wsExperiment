// Generated by CoffeeScript 1.9.3
(function() {
  var NodeCache, SocketServer, chai, expect, sinon, spies;

  chai = require('chai');

  spies = require('chai-spies');

  expect = chai.expect;

  NodeCache = require('node-cache');

  SocketServer = require('../lib/SocketServer.js');

  sinon = require('sinon');

  chai.use(spies);

  describe('Socket server test suite', function() {
    var cache, clock, port, socketServer;
    socketServer = {};
    clock = {};
    port = 9090;
    cache = new NodeCache({
      stdTTL: 30,
      checkPeriod: 40
    });
    before(function() {
      return clock = sinon.useFakeTimers();
    });
    after(function() {
      return clock.restore();
    });
    beforeEach(function() {
      return socketServer = new SocketServer({
        port: ++port,
        cache: cache
      });
    });
    return describe('Socket Server ', function() {
      it('should be able to be created', function() {
        return expect(socketServer).to.be.an('object');
      });
      it('should be able to accept multiple incoming connections', function(done) {
        var connections, onConnect, socketClient1, socketClient2;
        connections = 0;
        onConnect = function() {
          connections++;
          if (connections === 2) {
            return done();
          }
        };
        socketClient1 = require('socket.io-client')('ws://localhost:' + port, {
          'force new connection': true
        });
        return socketClient2 = require('socket.io-client')('ws://localhost:' + port, {
          'force new connection': true
        });
      });
      return it('should populate applied cache with received user credentials', function() {
        socketServer.setUserToken(12, 'some token');
        expect(cache.get(12)).to.exist;
        clock.tick(40000);
        return expect(cache.get(12)).not.to.exist;
      });
    });
  });

}).call(this);
